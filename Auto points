gifdir = "./"
from argparse import _ArgumentGroup
import tkinter
from tkinter import ttk
from tkinter import *
import time
windows = tkinter.Tk()
windows.title("Idle Game")
windows.geometry('550x300')
screen_width = windows.winfo_width()
screen_height = windows.winfo_height()
count = 0
automatic = 0
automatic2 = 0
ClickUp = 0 #Times upgraded (Ppc)
ClickP = 1 #
CostA = 15 #Cost of Auto Collecter
CostA2 = 100 #Cost of Advanced Collecter
AUp = 1 #Multipler (Auto Collecter)
A2Up = 5 #Multiplier (Advanced Collecter)
CostAUp = 150 #Cost of Auto Colecter Multiplier
CostA2Up = 1000 #Cost of Advanced Collecter Multiplier
CostC = 10 #Cost of Upgrade Clicks
CUp = 1 #Times Upgraded
CostCUp = 100 #Cost of Click Multiplier
Ppc = 1 #Base amount (Clicks)
Ppc2 = 1 #Multiplier (Clicks)
Pps = 0 #Base Amount (Auto)
Pps2 = 1 #Multiplier (Auto)
P2ps = 0 #Base amount (Advanced)
P2ps2 = 1 #Multiplier (Advanced)
current_tick = 0
obj = time.gmtime(0)
epoch = time.asctime(obj)
curr_time = round(time.time()*1000)
tick = 0
sec = 0
required_tick_1 = tick + 1 # used for button gif
if True:
  obj = time.gmtime(0)
  epoch = time.asctime(obj)
  curr_time = round(time.time()*1000)
  goal_time = curr_time + 35
  goal_time_sec = curr_time + 1000

rows = 0
while rows < 50:
 windows.rowconfigure(rows, weight=1)
 windows.columnconfigure(rows, weight=1)
 rows += 1
 
nb = ttk.Notebook(windows)
nb.grid(row=1, column=0, columnspan=50, rowspan=49, sticky='NESW')
##nb.geometry(530, 300) 
page1 = ttk.Notebook(windows)
nb.add(page1, text='The Button')
page2 = ttk.Notebook(windows)
nb.add(page2, text='Upgrades')

def clicked(event):
  global count
  global ClickUp
  global Ppc2
  global Ppc
  count = count + Ppc * Ppc2
  point_count.configure(text=f'Points: {round(count)}')
  button.config(image=button_frames[2])
  animation_button_1(False)

def upgradeA(event):
  global automatic
  global count
  global point_count
  global AutoUP
  global CostA
  global Pps
  if count >= CostA:
    automatic = automatic + 1
    Pps = Pps + 1
    count = count - CostA
    CostA = CostA + (2*CostA/3)
    
    AutoUP.config(text=f"Auto Collector: + {AUp} per second     Price: {round(CostA)}")
  else:
    point_count.configure(text=f'Points: {round(count)}')  

def upgradeA2(event):
  global automatic2
  global AdvancedUP
  global count
  global CostA2
  global Pps
  global Pps2
  global P2ps
  global P2ps2
  if count >= CostA2:
    P2ps = P2ps + 5
    automatic2 = automatic2 + P2ps
    count = count - CostA2
    CostA2 = CostA2 + (2*CostA2/3)
    AdvancedUP.config(text=f"Advanced Collector: + {A2Up} per second     Price: {round(CostA2)}")
  else:
    point_count.configure(text=f'Points: {round(count)}')

def upgradeC(event):
  global count
  global ClickUp
  global ClickP
  global CostC
  global Ppc
  global Ppc2
  global CUp
  if count >= CostC:
    ClickP = ClickP + ClickUp
    ClickUp = ClickP * CUp
    Ppc = Ppc + 1
    count = count - round(CostC)
    CostC = CostC + (2*CostC/3)
    ##point_count.configure(text=f'Points: {round(count)}')
    ClickUP.config(text=f"Upgrade Clicks: + {CUp} per click     Price: {round(CostC)}")
  else:
    point_count.configure(text=f'Points: {round(count)}') 

def animation_button_1(main):
  global button_frames
  global tick
  global required_tick_1
  if main != True:
    required_tick_1 = tick + 3
    button.config(image=button_frames[2])
  elif main == True:
    if required_tick_1 == tick:
      button.config(image=button_frames[0])

def auto():
  global automatic
  global automatic2
  global count
  global Pps
  global Pps2
  global P2ps
  global P2ps2
  count = count + ((Pps*Pps2) + (P2ps*P2ps2))

def timemanager(time_type):
  global tick
  global sec
  global goal_time
  global goal_time_sec
  curr_time = round(time.time()*1000)
  if goal_time_sec <= curr_time and time_type == "second":
    sec = sec + 1
    goal_time_sec = curr_time + 1000
    return True
  elif time_type == "second":
    return False
  if goal_time <= curr_time and time_type == "tick":
    tick = tick + 1
    goal_time = curr_time + (100/6)
    return True
  else:
    return False

  
def system():
  if timemanager("tick") == True:
    animation_button_1(True)
    point_count.configure(text=f'Points: {round(count)}')
    updatelabel()
    updatescreen()
    ##point_count.configure(text=f'Points: {round(count)}')
    ##label5.configure(text=f'{Pps} per second')

  if timemanager("second") == True:
    auto()
                 
def clickpower(event):
  global count
  global CUp
  global CostCUp
  global Ppc
  global Ppc2
  if count >= CostCUp:
    CUp = CUp + CUp
    count = count - CostCUp
    CostCUp = 5*CostCUp
    Ppc2 = Ppc2*2 
    ClickUP.config(text=f"Upgrade Clicks: + {CUp} per click     Price: {round(CostC)}")
    ClickUpgrade.config(text=f"Double Click Power:     Price: {(CostCUp)}")
    label4.configure(text=f"{Ppc * Ppc2} per click")
    updatelabel()

def autopower(event):
  global count
  global AUp
  global CostAUp
  global Pps
  global Pps2
  if count >= CostAUp:
    AUp = AUp + AUp
    count = count - CostAUp
    CostAUp = 5*CostAUp
    Pps2 = Pps2*2
    AutoUP.config(text=f"Auto Collector: + {AUp} per second     Price: {round(CostA)}")
    AutoUpgrade.config(text=f"Double Auto Collecter:     Price: {(CostAUp)}")
    updatelabel()

def advancedpower(event):
  global count
  global A2Up
  global CostA2Up
  global P2ps
  global P2ps2
  if count >= CostA2Up:
    A2Up = A2Up + A2Up
    count = count - CostA2Up
    CostA2Up = 5*CostA2Up
    P2ps2 = P2ps2*2
    AdvancedUP.config(text=f"Advanced Collector: + {A2Up} per second     Price: {round(CostA2)}")
    AdvancedUpgrade.config(text=f"Double Advanced Collecter:     Price: {(CostA2Up)}")
    updatelabel()

def updatelabel():
  global Ppc
  global Ppc2
  global Pps
  global CUp
  global count
  point_count.configure(text=f'Points: {round(count)}')
  label4.configure(text=f'{Ppc * Ppc2} per click')
  label5.configure(text=f'{Pps * Pps2 + P2ps * P2ps2} per second')
  
def updatescreen():
  screen_width = windows.winfo_width()
  screen_height = windows.winfo_height()
  button.place(x=((screen_width/2)-55),y=((screen_height/2)-75))
  if False:
    AutoUP.place(x=((screen_width/2))-55,y=(50))
    ClickUP.place(x=((screen_width/2))-55,y=(0))
    AdvancedUP.place(x=((screen_width/2))-55,y=75)
    ClickUpgrade.place(x=((screen_width/2))-55,y=150)
    AutoUpgrade.place(x=((screen_width/2))-55,y=200)
    AdvancedUpgrade.place(x=((screen_width/2))-55,y=100)


windows.title("Idle Game")
point_count = tkinter.Label(windows)
point_count.grid(column=0, row=0)
label2 = tkinter.Label(page2)
label2.grid(column=1, row=2)
label3 = tkinter.Label(page2)
label3.grid(column=1, row=3)
label4 = tkinter.Label(windows)
label4.grid(column=1, row=0)
label5 = tkinter.Label(windows)
label5.grid(column=2, row=0)
label6 = tkinter.Label(page2)
label6.grid(column=1, row=5)
button_frames = [PhotoImage(file='button.gif',format = 'gif -index %i' %(i)) for i in range(3)]
button = tkinter.ttk.Button(page1, image=button_frames[0])
button.config(image=button_frames[2])
#label2.configure(text=f'Click Upgrades')
#label3.configure(text=f'Auto Upgrades')
#label6.configure(text=f'Multipliers')
button.place(x=(screen_width/2),y=(screen_height/2))
button.bind("<Button-1>", clicked)
ClickUP = tkinter.ttk.Button(page2, text=f'Upgrade Clicks: + {CUp} per click     Price: {round(CostC)}')
ClickUP.bind("<Button-1>", upgradeC)
ClickUP.grid(column=1, row=2)
AutoUP = tkinter.ttk.Button(page2, text=f'Auto Collector: + {AUp} per second     Price: {round(CostA)}')
AutoUP.bind("<Button-1>", upgradeA)
AutoUP.grid(column=1, row=3)
AdvancedUP = tkinter.ttk.Button(page2, text=f'Adavnced Collector: + {A2Up} per second     Price: {round(CostA2)}')
AdvancedUP.bind("<Button-1>", upgradeA2)
AdvancedUP.grid(column=1, row=4)
ClickUpgrade = tkinter.ttk.Button(page2, text=f'Double Click Power:     Price: {(CostCUp)}')
ClickUpgrade.bind("<Button-1>", clickpower)
ClickUpgrade.grid(column=1, row=5)
AutoUpgrade = tkinter.ttk.Button(page2, text=f'Double Auto Collector:     Price: {(CostAUp)}')
AutoUpgrade.bind("<Button-1>", autopower)
AutoUpgrade.grid(column=1, row=6)
AdvancedUpgrade = tkinter.ttk.Button(page2, text=f'Double Advanced Collector:     Price: {(CostA2Up)}')
AdvancedUpgrade.bind("<Button-1>", advancedpower)
AdvancedUpgrade.grid(column=1, row=7)
while True:
  system()
  windows.update_idletasks()
  windows.update()
  